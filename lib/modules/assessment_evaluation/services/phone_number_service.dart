import 'dart:convert';
import 'package:get_storage/get_storage.dart';
import '../models/phone_number_model.dart';

class PhoneNumberService {
  static const String _phoneNumbersKey = 'saved_phone_numbers';
  static const String _currentPhoneKey = 'current_phone_number';

  final GetStorage _storage = GetStorage();

  /// L∆∞u s·ªë ƒëi·ªán tho·∫°i hi·ªán t·∫°i
  Future<void> saveCurrentPhoneNumber(PhoneNumberModel phoneNumber) async {
    try {
      await _storage.write(_currentPhoneKey, phoneNumber.toJson());
      print('‚úÖ ƒê√£ l∆∞u s·ªë ƒëi·ªán tho·∫°i hi·ªán t·∫°i: ${phoneNumber.phoneNumber}');
    } catch (e) {
      print('‚ùå L·ªói khi l∆∞u s·ªë ƒëi·ªán tho·∫°i hi·ªán t·∫°i: $e');
    }
  }

  /// L·∫•y s·ªë ƒëi·ªán tho·∫°i hi·ªán t·∫°i
  PhoneNumberModel? getCurrentPhoneNumber() {
    try {
      final data = _storage.read(_currentPhoneKey);
      if (data != null) {
        return PhoneNumberModel.fromJson(Map<String, dynamic>.from(data));
      }
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y s·ªë ƒëi·ªán tho·∫°i hi·ªán t·∫°i: $e');
    }
    return null;
  }

  /// Th√™m s·ªë ƒëi·ªán tho·∫°i v√†o danh s√°ch ƒë√£ l∆∞u
  Future<void> addPhoneNumberToHistory(PhoneNumberModel phoneNumber) async {
    try {
      final List<PhoneNumberModel> phoneNumbers = getSavedPhoneNumbers();

      // Ki·ªÉm tra xem s·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i ch∆∞a
      final existingIndex = phoneNumbers.indexWhere(
        (p) => p.phoneNumber == phoneNumber.phoneNumber,
      );

      if (existingIndex != -1) {
        // C·∫≠p nh·∫≠t th√¥ng tin n·∫øu ƒë√£ t·ªìn t·∫°i
        phoneNumbers[existingIndex] = phoneNumber;
        print('üìù ƒê√£ c·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i: ${phoneNumber.phoneNumber}');
      } else {
        // Th√™m m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
        phoneNumbers.add(phoneNumber);
        print('‚ûï ƒê√£ th√™m s·ªë ƒëi·ªán tho·∫°i m·ªõi: ${phoneNumber.phoneNumber}');
      }

      // L∆∞u danh s√°ch c·∫≠p nh·∫≠t
      final jsonList = phoneNumbers.map((p) => p.toJson()).toList();
      await _storage.write(_phoneNumbersKey, jsonList);

    } catch (e) {
      print('‚ùå L·ªói khi th√™m s·ªë ƒëi·ªán tho·∫°i v√†o l·ªãch s·ª≠: $e');
    }
  }

  /// L·∫•y danh s√°ch s·ªë ƒëi·ªán tho·∫°i ƒë√£ l∆∞u
  List<PhoneNumberModel> getSavedPhoneNumbers() {
    try {
      final data = _storage.read(_phoneNumbersKey);
      if (data != null && data is List) {
        return data
            .map((item) => PhoneNumberModel.fromJson(Map<String, dynamic>.from(item)))
            .toList();
      }
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y danh s√°ch s·ªë ƒëi·ªán tho·∫°i: $e');
    }
    return [];
  }

  /// X√≥a s·ªë ƒëi·ªán tho·∫°i kh·ªèi l·ªãch s·ª≠
  Future<void> removePhoneNumber(String phoneNumber) async {
    try {
      final List<PhoneNumberModel> phoneNumbers = getSavedPhoneNumbers();
      phoneNumbers.removeWhere((p) => p.phoneNumber == phoneNumber);

      final jsonList = phoneNumbers.map((p) => p.toJson()).toList();
      await _storage.write(_phoneNumbersKey, jsonList);

      print('üóëÔ∏è ƒê√£ x√≥a s·ªë ƒëi·ªán tho·∫°i: $phoneNumber');
    } catch (e) {
      print('‚ùå L·ªói khi x√≥a s·ªë ƒëi·ªán tho·∫°i: $e');
    }
  }

  /// X√≥a t·∫•t c·∫£ s·ªë ƒëi·ªán tho·∫°i
  Future<void> clearAllPhoneNumbers() async {
    try {
      await _storage.remove(_phoneNumbersKey);
      await _storage.remove(_currentPhoneKey);
      print('üßπ ƒê√£ x√≥a t·∫•t c·∫£ s·ªë ƒëi·ªán tho·∫°i');
    } catch (e) {
      print('‚ùå L·ªói khi x√≥a t·∫•t c·∫£ s·ªë ƒëi·ªán tho·∫°i: $e');
    }
  }

  /// L·∫•y s·ªë ƒëi·ªán tho·∫°i ƒë∆∞·ª£c s·ª≠ d·ª•ng g·∫ßn ƒë√¢y nh·∫•t
  PhoneNumberModel? getMostRecentPhoneNumber() {
    final phoneNumbers = getSavedPhoneNumbers();
    if (phoneNumbers.isEmpty) return null;

    // S·∫Øp x·∫øp theo th·ªùi gian t·∫°o gi·∫£m d·∫ßn
    phoneNumbers.sort((a, b) => b.createdAt.compareTo(a.createdAt));
    return phoneNumbers.first;
  }

  /// Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i c√≥ h·ª£p l·ªá kh√¥ng
  bool isValidPhoneNumber(String phoneNumber) {
    // Regex cho s·ªë ƒëi·ªán tho·∫°i Vi·ªát Nam
    final RegExp phoneRegex = RegExp(r'^(0|\+84)[3|5|7|8|9][0-9]{8}$');
    return phoneRegex.hasMatch(phoneNumber.replaceAll(' ', '').replaceAll('-', ''));
  }

  /// Format s·ªë ƒëi·ªán tho·∫°i
  String formatPhoneNumber(String phoneNumber) {
    final cleanNumber = phoneNumber.replaceAll(' ', '').replaceAll('-', '');
    if (cleanNumber.length == 10 && cleanNumber.startsWith('0')) {
      return '${cleanNumber.substring(0, 4)} ${cleanNumber.substring(4, 7)} ${cleanNumber.substring(7)}';
    }
    return phoneNumber;
  }

  /// L∆∞u th√¥ng tin x√°c nh·∫≠n (bao g·ªìm s·ªë ƒëi·ªán tho·∫°i)
  Future<void> saveConfirmationInfo({
    required String phoneNumber,
    required String contactName,
    required String method,
    required String dateTime,
    String? address,
    String? storeName,
    String? note,
  }) async {
    try {
      final phoneModel = PhoneNumberModel(
        phoneNumber: phoneNumber,
        contactName: contactName,
        createdAt: DateTime.now(),
        note: 'X√°c nh·∫≠n $method - $dateTime${note != null ? ' - $note' : ''}',
      );

      // L∆∞u s·ªë ƒëi·ªán tho·∫°i hi·ªán t·∫°i
      await saveCurrentPhoneNumber(phoneModel);

      // Th√™m v√†o l·ªãch s·ª≠
      await addPhoneNumberToHistory(phoneModel);

      // L∆∞u th√¥ng tin x√°c nh·∫≠n chi ti·∫øt
      final confirmationData = {
        'phoneNumber': phoneNumber,
        'contactName': contactName,
        'method': method,
        'dateTime': dateTime,
        'address': address,
        'storeName': storeName,
        'note': note,
        'confirmedAt': DateTime.now().toIso8601String(),
      };

      await _storage.write('last_confirmation', confirmationData);

      print('‚úÖ ƒê√£ l∆∞u th√¥ng tin x√°c nh·∫≠n ho√†n t·∫•t');

    } catch (e) {
      print('‚ùå L·ªói khi l∆∞u th√¥ng tin x√°c nh·∫≠n: $e');
    }
  }
}
